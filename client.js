// Generated by CoffeeScript 1.10.0
(function() {
  var $, DATA_H, DATA_LENGTH, DATA_W, MID_NOTE, OCTAVES, SCALE_X, SCALE_Y, TIME_SCALE, TONES, canvas, click, clicking, context, ctx, data, draw, drawcount, drawdata, genColor, getRegion, init, inited, mastergain, newdata, paused, raf, reInit, regions, rel, setupAudio, setupBuffers, setupCanvas, setupRegions, step;

  $ = document.querySelector.bind(document);

  canvas = $('#canvas');

  ctx = canvas.getContext("2d");

  ctx.fillRect(0, 0, canvas.width, canvas.height);

  TONES = 5;

  OCTAVES = 4;

  MID_NOTE = 440;

  SCALE_X = 4;

  SCALE_Y = 5;

  TIME_SCALE = 5;

  data = newdata = drawdata = DATA_W = DATA_H = DATA_LENGTH = null;

  setupBuffers = function() {
    var i, j, k, ref, ref1, results;
    DATA_W = SCALE_X * TONES;
    DATA_H = SCALE_Y * OCTAVES;
    DATA_LENGTH = DATA_W * DATA_H;
    data = new Uint8ClampedArray(DATA_LENGTH);
    newdata = new Uint8ClampedArray(DATA_LENGTH);
    drawdata = new Uint8ClampedArray(DATA_LENGTH * 4);
    for (i = j = 0, ref = data.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      data[i] = newdata[i] = 0;
    }
    results = [];
    for (i = k = 0, ref1 = drawdata.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
      results.push(drawdata[i] = i % 4 === 3 ? 255 : void 0);
    }
    return results;
  };

  genColor = function(h, s) {
    var b, f, g, i, p, q, r, ref, t, v;
    i = Math.floor(h * 6);
    f = h * 6 - i;
    p = 1 - s;
    q = 1 - f * s;
    t = 1 - (1 - f) * s;
    v = 1;
    ref = (function() {
      switch (i % 6) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    })(), r = ref[0], g = ref[1], b = ref[2];
    return {
      r: r,
      g: g,
      b: b
    };
  };

  context = mastergain = null;

  setupAudio = function() {
    context = new (window.AudioContext || window.webkitAudioContext)();
    mastergain = context.createGain();
    mastergain.gain.value = 0.75;
    return mastergain.connect(context.destination);
  };

  regions = [];

  setupRegions = function() {
    var color, freq, gain, i, j, k, len, osc, ref, region, results, x, y;
    for (j = 0, len = regions.length; j < len; j++) {
      region = regions[j];
      region.osc.stop();
    }
    regions = [];
    results = [];
    for (i = k = 0, ref = TONES * OCTAVES; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      freq = MID_NOTE * Math.pow(2, i / TONES - OCTAVES / 2);
      osc = context.createOscillator();
      osc.frequency.value = freq;
      gain = context.createGain();
      gain.gain.value = 0;
      osc.connect(gain);
      osc.start();
      gain.connect(mastergain);
      x = i % TONES / TONES;
      y = Math.floor(i / TONES) / OCTAVES;
      color = genColor(x, 1 - y);
      results.push(regions.push({
        osc: osc,
        gain: gain,
        color: color,
        newgain: 0
      }));
    }
    return results;
  };

  getRegion = function(x, y) {
    var reg;
    y = Math.floor((DATA_H - 1 - y) / SCALE_Y);
    x = Math.floor(x / SCALE_X);
    return reg = regions[x + y * TONES];
  };

  setupCanvas = function() {
    var j, len, ref, results, x;
    ctx.setTransform(canvas.width / DATA_W, 0, 0, canvas.height / DATA_H, 0, 0);
    ctx.globalCompositeOperation = "copy";
    ctx.imageSmoothingEnabled = false;
    ref = 'moz ms webkit'.split(' ');
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      x = ref[j];
      results.push(ctx[x + "ImageSmoothingEnabled"] = false);
    }
    return results;
  };

  drawcount = 0;

  draw = function() {
    var c, drawR, i, imageData, j, k, len, max_global, max_region, oldval, ref, region, totalgain, v, val;
    totalgain = 0;
    drawR = drawcount / TIME_SCALE;
    for (i = j = 0, ref = drawdata.length; j < ref; i = j += 4) {
      region = getRegion(i / 4 % DATA_W, Math.floor(i / 4 / DATA_W));
      val = data[i >> 2];
      oldval = newdata[i >> 2];
      v = 255 * (val * drawR + oldval * (1 - drawR));
      region.newgain += v;
      totalgain += v;
      c = region.color;
      drawdata[i] = c.r * v;
      drawdata[i + 1] = c.g * v;
      drawdata[i + 2] = c.b * v;
    }
    max_region = SCALE_X * SCALE_Y;
    max_global = DATA_W * DATA_H;
    for (k = 0, len = regions.length; k < len; k++) {
      region = regions[k];
      region.gain.gain.value = region.newgain / totalgain || 0;
      region.newgain = 0;
    }
    imageData = new ImageData(drawdata, DATA_W, DATA_H);
    ctx.putImageData(imageData, 0, 0);
    return ctx.drawImage(ctx.canvas, 0, 0);
  };

  rel = function(n, x, y) {
    var b, i;
    i = n + x + y * DATA_W;
    b = n % DATA_W + x;
    if (b > DATA_W || b < 0 || i >= DATA_LENGTH || i < 0) {
      return 0;
    }
    return data[i];
  };

  step = function() {
    var alive, i, j, k, len, n, neighbours, ref, ref1;
    for (i = j = 0, ref = data.length; j < ref; i = j += 1) {
      neighbours = [rel(i, -1, -1), rel(i, 0, -1), rel(i, +1, -1), rel(i, -1, 0), rel(i, +1, 0), rel(i, -1, +1), rel(i, 0, +1), rel(i, +1, +1)];
      alive = 0;
      for (k = 0, len = neighbours.length; k < len; k++) {
        n = neighbours[k];
        if (n === 1) {
          alive++;
        }
      }
      if (alive < 2) {
        newdata[i] = 0;
      } else if (alive > 3) {
        newdata[i] = 0;
      } else if (alive === 3) {
        newdata[i] = 1;
      } else {
        newdata[i] = data[i];
      }
    }
    return ref1 = [newdata, data], data = ref1[0], newdata = ref1[1], ref1;
  };

  paused = false;

  raf = function() {
    if (!paused) {
      drawcount++;
    }
    draw();
    if (drawcount >= TIME_SCALE) {
      drawcount = 0;
      step();
    }
    return requestAnimationFrame(raf);
  };

  inited = false;

  init = function() {
    inited = true;
    setupAudio();
    setupBuffers();
    setupRegions();
    setupCanvas();
    step();
    return raf();
  };

  reInit = function() {
    setupBuffers();
    setupRegions();
    return setupCanvas();
  };

  clicking = false;

  click = function(ev) {
    var i, x, y;
    if (!clicking) {
      return;
    }
    x = Math.floor(ev.offsetX / canvas.offsetWidth * DATA_W);
    y = Math.floor(ev.offsetY / canvas.offsetHeight * DATA_H);
    i = y * DATA_W + x;
    return data[i] = newdata[i] = 1;
  };

  canvas.addEventListener('mousedown', function(ev) {
    if (!inited) {
      init();
    }
    if (ev.button === 0) {
      clicking = true;
    }
    return click(ev);
  });

  canvas.addEventListener('mouseup', function() {
    return clicking = false;
  });

  canvas.addEventListener('mouseout', function() {
    return clicking = false;
  });

  canvas.addEventListener('mousemove', click);

  $('#clear').addEventListener('click', function() {
    var i, j, ref, results;
    results = [];
    for (i = j = 0, ref = data.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      results.push(data[i] = newdata[i] = 0);
    }
    return results;
  });

  $('#random').addEventListener('click', function() {
    var i, j, ref, results;
    results = [];
    for (i = j = 0, ref = data.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      results.push(data[i] = newdata[i] = Math.round(Math.random()));
    }
    return results;
  });

  $('#pause').addEventListener('click', function() {
    paused = !paused;
    return $('#pause').textContent = paused ? 'Play' : 'Pause';
  });

  $('#octaves').value = OCTAVES;

  $('#octaves').addEventListener('input', function() {
    OCTAVES = $('#octaves').value * 1 || OCTAVES;
    return reInit();
  });

  $('#tones').value = TONES;

  $('#tones').addEventListener('input', function() {
    TONES = $('#tones').value * 1 || TONES;
    return reInit();
  });

  $('#scale_x').value = SCALE_X;

  $('#scale_x').addEventListener('input', function() {
    SCALE_X = $('#scale_x').value * 1 || SCALE_X;
    return reInit();
  });

  $('#scale_y').value = SCALE_Y;

  $('#scale_y').addEventListener('input', function() {
    SCALE_Y = $('#scale_y').value * 1 || SCALE_Y;
    return reInit();
  });

  $('#mid_note').value = MID_NOTE;

  $('#mid_note').addEventListener('input', function() {
    MID_NOTE = $('#mid_note').value * 1 || MID_NOTE;
    return setupRegions();
  });

  $('#time_scale').value = TIME_SCALE;

  $('#time_scale').addEventListener('input', function() {
    return TIME_SCALE = $('#time_scale').value * 1 || TIME_SCALE;
  });

}).call(this);
